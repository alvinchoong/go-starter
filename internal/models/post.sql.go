// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const CreatePost = `-- name: CreatePost :one
INSERT INTO post (id, title, description)
VALUES ($1, $2, $3)
RETURNING id, title, description, created_at, updated_at
`

type CreatePostParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
}

func (q *Queries) CreatePost(ctx context.Context, db DBTX, arg CreatePostParams) (Post, error) {
	row := db.QueryRow(ctx, CreatePost, arg.ID, arg.Title, arg.Description)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeletePost = `-- name: DeletePost :execrows
DELETE FROM post WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, db DBTX, id uuid.UUID) (int64, error) {
	result, err := db.Exec(ctx, DeletePost, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetPost = `-- name: GetPost :one
SELECT id, title, description, created_at, updated_at
FROM post
WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, db DBTX, id uuid.UUID) (Post, error) {
	row := db.QueryRow(ctx, GetPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListPosts = `-- name: ListPosts :many
SELECT id, title, description, created_at, updated_at
FROM post
ORDER BY created_at DESC
`

func (q *Queries) ListPosts(ctx context.Context, db DBTX) ([]Post, error) {
	rows, err := db.Query(ctx, ListPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePost = `-- name: UpdatePost :one
UPDATE post SET
  title = $2,
  description = $3,
  updated_at = NOW()
WHERE id = $1
RETURNING id, title, description, created_at, updated_at
`

type UpdatePostParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
}

func (q *Queries) UpdatePost(ctx context.Context, db DBTX, arg UpdatePostParams) (Post, error) {
	row := db.QueryRow(ctx, UpdatePost, arg.ID, arg.Title, arg.Description)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
